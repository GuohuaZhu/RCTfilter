# GitHub Actions 工作流程：用于自动部署到 GitHub Pages
#
# 如何使用:
# 1. 在你的 GitHub 仓库中, 创建一个 `.github/workflows` 文件夹 (如果还没有的话)。
# 2. 将此文件保存为 `deploy.yml` 并放入 `.github/workflows` 文件夹中。
# 3. 确保你的 `rct_screener.html` 和 `data.js` 文件在仓库的 `main` 分支根目录。
# 4. 去仓库的 "Settings" > "Pages" 页面。
# 5. 在 "Build and deployment" 下的 "Source" 选择 "Deploy from a branch"。
# 6. 在 "Branch" 下拉框中, 选择 `gh-pages` 分支, 目录保持 `/ (root)`, 然后点击 "Save"。
#    (注意: `gh-pages` 分支会在第一次运行此脚本后自动创建, 你可能需要先推送一次代码, 再来设置)
#
# 之后, 每次你向 `main` 分支推送代码, 此脚本都会自动运行, 并将网页更新到你的 GitHub Pages 网址。

name: Deploy to GitHub Pages

# 触发条件：当推送到 main 分支时
on:
  push:
    branches:
      - main

# 允许此工作流程创建和推送 gh-pages 分支
permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # 步骤 1: 检出 main 分支的代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤 2: 部署到 gh-pages 分支
      # 使用一个社区的 Action 来简化这个过程
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          # GitHub Actions 运行时的 GITHUB_TOKEN，用于推送
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # 要部署的文件夹 (当前是根目录, 包含 .html 和 .js)
          publish_dir: .
          # 推送到的目标分支
          publish_branch: gh-pages
          # 排除 .github 目录和此文件本身
          exclude_assets: '.github,deploy.yml'
          # 提交信息
          commit_message: 'Deploy to GitHub Pages'
